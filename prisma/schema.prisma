// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Period coaching relationships
  cycles        Cycle[]
  chatMessages  ChatMessage[]
  symptoms      Symptom[]
  analytics     Analytics[]

  // Subscription information
  subscription Subscription?
  
  // Team membership
  teamMemberships TeamMember[]
  
  // API usage tracking
  apiUsage ApiUsage[]
  
  // NextAuth.js session and account relations
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String
  metric    String   // e.g., "likes", "comments", "shares", "reach"
  value     Int
  platform  Platform
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

model Subscription {
  id                String           @id @default(cuid())
  userId            String           @unique
  stripeCustomerId  String?          @unique
  stripeSubscriptionId String?       @unique
  plan              SubscriptionPlan @default(FREE)
  status            SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members TeamMember[]

  @@map("teams")
}

model TeamMember {
  id       String       @id @default(cuid())
  userId   String
  teamId   String
  role     TeamRole     @default(MEMBER)
  joinedAt DateTime     @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model ApiUsage {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  method    String
  statusCode Int
  responseTime Int    // in milliseconds
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_usage")
}

// NEW PERIOD COACHING MODELS
model Cycle {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate DateTime
  endDate   DateTime?
  symptoms  String[]
  flow      Flow     @default(MEDIUM)
  mood      String[]
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  role      MessageRole
  createdAt DateTime @default(now())
}

model Symptom {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        SymptomType
  severity    Severity
  date        DateTime
  notes       String?
  createdAt   DateTime @default(now())
}

enum Platform {
  INSTAGRAM
  TWITTER
  LINKEDIN
  TIKTOK
  FACEBOOK
}

enum SubscriptionPlan {
  FREE
  PRO
  BUSINESS
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
  TRIAL
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum Flow {
  LIGHT
  MEDIUM
  HEAVY
}

enum MessageRole {
  USER
  ASSISTANT
}

enum SymptomType {
  CRAMPS
  HEADACHE
  BLOATING
  MOOD_SWINGS
  FATIGUE
  NAUSEA
  BREAST_TENDERNESS
  ACNE
  CRAVINGS
}

enum Severity {
  MILD
  MODERATE
  SEVERE
} 